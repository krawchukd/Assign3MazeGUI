
import java.awt.Color;
import java.awt.FontMetrics;
import java.awt.Graphics;

/**
 *
 *
 * Name: David Krawchuk (krawc004)
 * Course: CSCI 242 - Computer Science II
 * Section: 001
 * Assignment: 3
 *
 * Project/Class Description:
 *  MazePanel holds the contents of the drawn maze. This is 
 * where the action of the robot takes place!
 *
 * Known bugs:
 *  No known bugs at this time.
 */
public class MazePanel extends javax.swing.JPanel
{
    
    //Instance variable for holding a maze object.
    private Maze maze;
    
    //Instance variable for holding a robot object.
    private Robot robot;
    
    //Constant for use in drawing Boxes.
    private final int WIDTH = 20;
    
    //Constant for use in drawing Boxes.
    private final int LENGTH = 20;
    
    //Color for drawing and filling rectangles.
    private Color recColor = Color.BLACK;


    /**
     * Creates new form MazePanel
     */
    public MazePanel()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setMaximumSize(null);
        setMinimumSize(null);
        setPreferredSize(null);
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

/**
 * This is a setter method used to set a new maze.
 * 
 * @param maze 
 */    
    public void setMaze(Maze maze)
    {
        this.maze = maze;
    }
    
/**
 * Getter method for accessing contents of maze.
 * 
 * @return 
 */    
    public Maze getMaze()
    {
        return this.maze;
    }
    
/**
 * This is a setter method used to set a new robot outside 
 * the constructor.
 * 
 * @param robot 
 */    
    public void setRobot(Robot robot)
    {
        this.robot = robot;
    }
    
/**
 * Getter method used for access to robot contents.
 * 
 * @return 
 */    
    public Robot getRobot()
    {
        return this.robot;
    }
    
/**
 * Method for setting the box color.
 * @param c 
 */    
    public void setBoxColor(Color c)
    {
        this.recColor = c;
    }
    
    /**
     *Paints the boxes in the mazepanel by calling two helper methods.
     * 
     * @param g
     */
    @Override
    protected void paintComponent(Graphics g)
    {
        if(this.maze != null)
        {
            super.paintComponent(g);
            
            //Draw out the Maze.
            drawCell(g);

            //Draw the robot in the current possition
            //in the maze.
            drawRobot(g);
        }
    }
    
    
/**
 * This method parses through the maze and draws the apropreate rectangle
 * based on the character in that cell.
 * Used exclusively by the paintComponent() method.
 * 
 * @param g 
 */
    private void drawCell(Graphics g)
    {
        //set color for boxes to be drawn.
        g.setColor(recColor);
        
        //draw boxes.
        for (int i = 0; i < maze.getRows(); i++)
        {
            for (int j = 0; j < maze.getCols(); j++)
            {
                //Check cell status. If full fill rectangle.
                if('*' == maze.getCell(i, j))
                {
                    g.fillRect((j * WIDTH), (i * LENGTH), WIDTH, LENGTH);
                }
                
                //If "B' is found in the maze cell fill cell red. Used 
                //by memory robot to indicate blocked off cell.
                if('B' == maze.getCell(i, j))
                {
                    g.setColor(Color.RED);
                    g.fillRect((j * WIDTH), (i * LENGTH), WIDTH, LENGTH); 
                    g.setColor(recColor);
                }
                
                //default: draw empty cell.
                else
                    g.drawRect((j * WIDTH), (i * LENGTH), WIDTH, LENGTH);
                
            }
            
        }
    }
    
/**
 * Determines the center of an eligible cell, and then determines the center of 
 * that cell in order to draw the character 'R'.
 * This method is used exclusively by the paintComponent() method.
 * 
 * @param g 
 */    
    private void drawRobot(Graphics g)
    {
        //This block sets up the cordinates for the placement of the Robot
        //character.
        FontMetrics fm = g.getFontMetrics();
        int stringXCenter = fm.stringWidth("R") / 2;
        int stringYCenter = fm.getAscent() / 2;
        int cellXCenter = (robot.getCurColLoc() * WIDTH) + 10;
        int cellYCenter = (robot.getCurRowLoc() * LENGTH) + 10;
        
        //Draws the "R" character in the center of the rectangle, using the 
        //cordinates determined from the block above.
        g.drawString("R", cellXCenter - stringXCenter, cellYCenter + stringYCenter);
    }
    
}
