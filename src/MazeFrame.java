
import java.awt.Color;
import java.io.File;
import java.util.InputMismatchException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;


/**
 *
 *
 * Name: David Krawchuk (krawc004)
 * Course: CSCI 242 - Computer Science II
 * Section: 001
 * Assignment: 3
 *
 * Project/Class Description:
 *  The MazeFrame class is the container that holds the MazePanel contents.
 * Menus and functions that affect the maze are controlled by the maze class, 
 * by direct calling of the mazePanel's functions.
 *
 * Known bugs:
 *  No known bugs at this time.
 */
public class MazeFrame extends javax.swing.JFrame
{
    // file used to store information about loaded maze.
    private  File file;
    
    //ran used to determine when to promt user to reset maze.
    private boolean ran;

    /**
     * Constructor: initializing components.
     */
    public MazeFrame()
    {
        initComponents();
        
        //Set visibility of menu items, for the start of the program.
        file_Solve.setEnabled(false);
        robotMenu.setEnabled(false);
        maze_ResetMaze.setEnabled(false);
        maze_WallColor.setEnabled(false);
    }
   

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        mazePanel = new MazePanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        file_Solve = new javax.swing.JMenuItem();
        file_Exit = new javax.swing.JMenuItem();
        mazeMenu = new javax.swing.JMenu();
        maze_Load = new javax.swing.JMenuItem();
        maze_ResetMaze = new javax.swing.JMenuItem();
        maze_WallColor = new javax.swing.JMenu();
        maze_WallColor_Blue = new javax.swing.JMenuItem();
        maze_WallColor_Green = new javax.swing.JMenuItem();
        maze_WallColor_Pink = new javax.swing.JMenuItem();
        maze_WallColor_Yellow = new javax.swing.JMenuItem();
        maze_WallColor_Majenta = new javax.swing.JMenuItem();
        robotMenu = new javax.swing.JMenu();
        robot_RandomRobot = new javax.swing.JMenuItem();
        robot_MemoryRobot = new javax.swing.JMenuItem();
        robot_LeftHandRobot = new javax.swing.JMenuItem();
        robot_RightHandRobot = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Assign3MazeGUI");
        setPreferredSize(new java.awt.Dimension(200, 200));
        getContentPane().add(mazePanel, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");

        file_Solve.setText("Solve");
        file_Solve.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                file_SolveActionPerformed(evt);
            }
        });
        fileMenu.add(file_Solve);

        file_Exit.setText("Exit");
        file_Exit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                file_ExitActionPerformed(evt);
            }
        });
        fileMenu.add(file_Exit);

        jMenuBar1.add(fileMenu);

        mazeMenu.setText("Maze");

        maze_Load.setText("Load File");
        maze_Load.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_LoadActionPerformed(evt);
            }
        });
        mazeMenu.add(maze_Load);

        maze_ResetMaze.setText("Reset Maze");
        maze_ResetMaze.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_ResetMazeActionPerformed(evt);
            }
        });
        mazeMenu.add(maze_ResetMaze);

        maze_WallColor.setText("Wall Color");

        maze_WallColor_Blue.setText("Blue");
        maze_WallColor_Blue.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_WallColor_BlueActionPerformed(evt);
            }
        });
        maze_WallColor.add(maze_WallColor_Blue);

        maze_WallColor_Green.setText("Green");
        maze_WallColor_Green.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_WallColor_GreenActionPerformed(evt);
            }
        });
        maze_WallColor.add(maze_WallColor_Green);

        maze_WallColor_Pink.setText("Pink");
        maze_WallColor_Pink.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_WallColor_PinkActionPerformed(evt);
            }
        });
        maze_WallColor.add(maze_WallColor_Pink);

        maze_WallColor_Yellow.setText("Yellow");
        maze_WallColor_Yellow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_WallColor_YellowActionPerformed(evt);
            }
        });
        maze_WallColor.add(maze_WallColor_Yellow);

        maze_WallColor_Majenta.setText("Magenta");
        maze_WallColor_Majenta.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                maze_WallColor_MajentaActionPerformed(evt);
            }
        });
        maze_WallColor.add(maze_WallColor_Majenta);

        mazeMenu.add(maze_WallColor);

        jMenuBar1.add(mazeMenu);

        robotMenu.setText("Robot");

        robot_RandomRobot.setText("Random Robot");
        robot_RandomRobot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                robot_RandomRobotActionPerformed(evt);
            }
        });
        robotMenu.add(robot_RandomRobot);

        robot_MemoryRobot.setText("Memory Robot");
        robot_MemoryRobot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                robot_MemoryRobotActionPerformed(evt);
            }
        });
        robotMenu.add(robot_MemoryRobot);

        robot_LeftHandRobot.setText("Left-Hand Robot");
        robot_LeftHandRobot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                robot_LeftHandRobotActionPerformed(evt);
            }
        });
        robotMenu.add(robot_LeftHandRobot);

        robot_RightHandRobot.setText("Right-Hand Robot");
        robot_RightHandRobot.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                robot_RightHandRobotActionPerformed(evt);
            }
        });
        robotMenu.add(robot_RightHandRobot);

        jMenuBar1.add(robotMenu);

        setJMenuBar(jMenuBar1);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

/**
 * Action method that selects the right hand robot from the Robot menu. Creating 
 * a new right hand robot and enabling the solve option in the file menu.
 * 
 * @param evt 
 */    
    private void robot_RightHandRobotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_robot_RightHandRobotActionPerformed
    {//GEN-HEADEREND:event_robot_RightHandRobotActionPerformed
        //Creates new right hand robot and passes the maze to its constructor.
        mazePanel.setRobot(new RightHandRobot(mazePanel.getMaze()));
        
        //Enables solve within the file menu.
        file_Solve.setEnabled(true);
    }//GEN-LAST:event_robot_RightHandRobotActionPerformed

/**
 * Action method that selects the left hand robot from the Robot menu. Creating
 * a new left hand robot and enabling the solve option in the file menu.
 * 
 * @param evt 
 */    
    private void robot_LeftHandRobotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_robot_LeftHandRobotActionPerformed
    {//GEN-HEADEREND:event_robot_LeftHandRobotActionPerformed
        // Creates ne left hand robot and passes the maze to its constructor.
        mazePanel.setRobot(new LeftHandRobot(mazePanel.getMaze()));
        
        // Enables solve within the file menu.
        file_Solve.setEnabled(true);
    }//GEN-LAST:event_robot_LeftHandRobotActionPerformed

/**
 * Action method that selects the MemoryRobot robot from the Robot menu. Creating
 * a new robot and enabling the solve option in the file menu.
 * 
 * @param evt 
 */        
    private void robot_MemoryRobotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_robot_MemoryRobotActionPerformed
    {//GEN-HEADEREND:event_robot_MemoryRobotActionPerformed
        // Creates new memory robot and passes the maze to its constructor.
        mazePanel.setRobot(new MemoryRobotClass(mazePanel.getMaze()));
        
        //Enables solve within the file menu
        file_Solve.setEnabled(true);
    }//GEN-LAST:event_robot_MemoryRobotActionPerformed

/**
 * Action method that selects the Random robot from the Robot menu. Creating
 * a new robot and enabling the solve option in the file menu.
 * 
 * @param evt 
 */        
    private void robot_RandomRobotActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_robot_RandomRobotActionPerformed
    {//GEN-HEADEREND:event_robot_RandomRobotActionPerformed
        // Creates a new memory robot and passes the maze to its constructor.
        mazePanel.setRobot(new RandomRobot(mazePanel.getMaze()));
        
        // Enables solve within the file menu.
        file_Solve.setEnabled(true);
    }//GEN-LAST:event_robot_RandomRobotActionPerformed

/**
 * Action method that creates a new filechooser menu and allows the user to 
 * choose an apropreate menu. After the file has been chosen, creates and displays
 * the maze within the mazePanel container. NOTE: if the user selects an inappropreate
 * file then the maze readData() method prompts the user to reselect the correct file
 * or exit.
 * 
 * @param evt 
 */        
    private void maze_LoadActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_LoadActionPerformed
    {//GEN-HEADEREND:event_maze_LoadActionPerformed

        // Create a file chooser for file selection.
        JFileChooser fc = new JFileChooser(System.getProperty("user.dir"));
        int returnVal = fc.showOpenDialog(this);
        
        //After user selects a maze and clicks ok: read in maze contents and
        //create a new maze and display contents to user.
            if (returnVal == JFileChooser.APPROVE_OPTION) 
            {
                this.file = fc.getSelectedFile();
                mazePanel.setMaze(new Maze(file.getName())); 
                mazePanel.setRobot( new RandomRobot(mazePanel.getMaze()));
                
                // Enable appropreate menu's for changing options.
                robotMenu.setEnabled(true);
                maze_WallColor.setEnabled(true);
                
                // Sets the dimentions of the maze for the drawCell()
                // method.
                this.setSize((mazePanel.getMaze().getCols()) * 20,
                        (mazePanel.getMaze().getRows() + 2) * 20);
            }
       
    }//GEN-LAST:event_maze_LoadActionPerformed

/**
 * Action method that runs the robot thru the maze. Note: one of the catch
 * methods will prompt the user with an error informing the user of the 
 * possibility of improper maze format.
 * 
 * @param evt 
 */    
    private void file_SolveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_file_SolveActionPerformed
    {//GEN-HEADEREND:event_file_SolveActionPerformed
        try
        {
            run();    
        }
        catch (InterruptedException ex)
        {
            Logger.getLogger(MazeFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(null, "Error occured while robot was running"
                    + " thru maze.\n"
                    + "Please check dimentions in the maze file...",
                    "Error!!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_file_SolveActionPerformed

/**
 * Action method that exits the program when selected.
 * 
 * @param evt 
 */    
    private void file_ExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_file_ExitActionPerformed
    {//GEN-HEADEREND:event_file_ExitActionPerformed

        System.exit(0);
    }//GEN-LAST:event_file_ExitActionPerformed

/**
 * Action method that resets the maze to be solved again.
 * 
 * @param evt 
 */    
    private void maze_ResetMazeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_ResetMazeActionPerformed
    {//GEN-HEADEREND:event_maze_ResetMazeActionPerformed
        //Call method to perform appropreate actions.
        resetMaze();
    }//GEN-LAST:event_maze_ResetMazeActionPerformed

/**
 * Action method that sets the maze wall color to BLUE!
 * 
 * @param evt 
 */
    private void maze_WallColor_BlueActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_WallColor_BlueActionPerformed
    {//GEN-HEADEREND:event_maze_WallColor_BlueActionPerformed
        //Set color..
        mazePanel.setBoxColor(Color.BLUE);
        //Repaint the contents of the mazePanel.
        mazePanel.paintImmediately(0, 0, mazePanel.getWidth(), mazePanel.getHeight());
    }//GEN-LAST:event_maze_WallColor_BlueActionPerformed

/**
 * Action method that sets the maze wall color to GREEN! 
 * 
 * @param evt 
 */    
    private void maze_WallColor_GreenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_WallColor_GreenActionPerformed
    {//GEN-HEADEREND:event_maze_WallColor_GreenActionPerformed
        // Set wall color to GREEN.
        mazePanel.setBoxColor(Color.GREEN);
        
        // Repaint the mazePanel.
        mazePanel.paintImmediately(0, 0, mazePanel.getWidth(), mazePanel.getHeight());
    }//GEN-LAST:event_maze_WallColor_GreenActionPerformed

/**
 * Action method that sets the maze wall color to PINK!
 * 
 * @param evt 
 */    
    private void maze_WallColor_PinkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_WallColor_PinkActionPerformed
    {//GEN-HEADEREND:event_maze_WallColor_PinkActionPerformed
        // Sets wall color to Pink.
        mazePanel.setBoxColor(Color.PINK);
        
        // Repaints the Maze..
        mazePanel.paintImmediately(0, 0, mazePanel.getWidth(), mazePanel.getHeight());
    }//GEN-LAST:event_maze_WallColor_PinkActionPerformed

/**
 * Action method that sets the maze wall color to Yellow.
 * 
 * @param evt 
 */    
    private void maze_WallColor_YellowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_WallColor_YellowActionPerformed
    {//GEN-HEADEREND:event_maze_WallColor_YellowActionPerformed
        // Sets wall color to Yellow!
        mazePanel.setBoxColor(Color.YELLOW);
        
        // Repaints the Maze.
        mazePanel.paintImmediately(0, 0, mazePanel.getWidth(), mazePanel.getHeight());
    }//GEN-LAST:event_maze_WallColor_YellowActionPerformed

/**
 * Action method that sets the maze wall color to MAJENTA!
 * 
 * @param evt 
 */    
    private void maze_WallColor_MajentaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_maze_WallColor_MajentaActionPerformed
    {//GEN-HEADEREND:event_maze_WallColor_MajentaActionPerformed
        // Sets the wall color MAGENTA.
        mazePanel.setBoxColor(Color.MAGENTA);
        
        // Repaints the maze...
        mazePanel.paintImmediately(0, 0, mazePanel.getWidth(), mazePanel.getHeight());
    }//GEN-LAST:event_maze_WallColor_MajentaActionPerformed

/**
 * run() sets the appropreate visibility of the menus and runs the robot 
 * thru the maze.
 * 
 * @throws InterruptedException 
 */    
    public void run() throws InterruptedException
    {

        fileMenu.repaint();
        ran = true;
        
        //Remove menu options to force user to select Reset or exit.
        file_Solve.setEnabled(false);
        robotMenu.setEnabled(false);
        maze_Load.setEnabled(false);
        maze_WallColor.setEnabled(false);
        
        Thread.sleep(500);

        // keep travelling until you reach the exit
        for (int k = 0; k < 1000000 && !mazePanel.getRobot().done(); k++) 
        {                    

            mazePanel.getRobot().move();
            mazePanel.paintImmediately(0, 0, mazePanel.getWidth(), mazePanel.getHeight());
            Thread.sleep(100);
            repaint();                   

        }
                          
        
            JOptionPane.showMessageDialog(null, "Please choose Reset Maze from the Maze Menu above.\n"
                    + "Or choose to Exit from the File Menu",
                    "Robot Finished!", JOptionPane.INFORMATION_MESSAGE);
        
 
        
        maze_ResetMaze.setEnabled(true);
               
    }
    
/**
 * resetMaze() resets the maze so the user can run the robot again
 * or select other options to run again.
 */    
    public void resetMaze()
    {
        //reset maze.
        mazePanel.setMaze(new Maze(file.getName()));
        //reset robot possition.
        mazePanel.getRobot().setCurRowLoc(mazePanel.getMaze().getStartRow());
        mazePanel.getRobot().setCurColLoc(mazePanel.getMaze().getStartCol());
        // set visibility of menus.
        robotMenu.setEnabled(true);
        maze_WallColor.setEnabled(true);
        maze_Load.setEnabled(true);
        ran = false;
        //refresh the mazepanel.
        repaint();
        
    }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            @Override
            public void run()
            {
                new MazeFrame().setVisible(true);
            }
        }); 
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem file_Exit;
    private javax.swing.JMenuItem file_Solve;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu mazeMenu;
    private MazePanel mazePanel;
    private javax.swing.JMenuItem maze_Load;
    private javax.swing.JMenuItem maze_ResetMaze;
    private javax.swing.JMenu maze_WallColor;
    private javax.swing.JMenuItem maze_WallColor_Blue;
    private javax.swing.JMenuItem maze_WallColor_Green;
    private javax.swing.JMenuItem maze_WallColor_Majenta;
    private javax.swing.JMenuItem maze_WallColor_Pink;
    private javax.swing.JMenuItem maze_WallColor_Yellow;
    private javax.swing.JMenu robotMenu;
    private javax.swing.JMenuItem robot_LeftHandRobot;
    private javax.swing.JMenuItem robot_MemoryRobot;
    private javax.swing.JMenuItem robot_RandomRobot;
    private javax.swing.JMenuItem robot_RightHandRobot;
    // End of variables declaration//GEN-END:variables
}
